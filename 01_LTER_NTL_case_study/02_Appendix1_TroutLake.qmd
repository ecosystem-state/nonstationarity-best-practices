---
title: "Appendix 1: Trout Lake"
format: pdf
editor: visual
crossref:
  custom:
    - kind: float
      key: suppfig
      latex-env: suppfig
      reference-prefix: Figure S
      space-before-numbering: false
      latex-list-of-description: Supplementary Figure
    - kind: float
      key: supptab
      latex-env: supptab
      reference-prefix: Table S
      space-before-numbering: false
      latex-list-of-description: Supplementary Table
---

## Overview

Here we show the LM, and GAM analysis for the Trout Lake dataset. For complete code, see the [full quarto document](https://github.com/ecosystem-state/nonstationarity-best-practices/blob/main/LTER_NTL_case_study/Appendix1_TroutLake.qmd)

Approach for running LTER-NTL Trout Lake data using temporally structured GAMs and linear regression models with time periods defined a-priori.

```{r}
#| echo: false
#| include: false
#| error: false
#| warning: false
library(paletteer)
library(ggpubr)
library(nord)
library(ggplot2)
library(dplyr)
library(stringr)
library(dplyr)
library(nord)
library(ggpubr)
library(tidyr)
library(data.table)
library(mgcv)
library(kableExtra)
library(knitr)
library(strucchange)
library(mgcv)
library(gratia)
col<-paletteer_d("nationalparkcolors::Everglades")
full_data <- readRDS(here::here("01_LTER_NTL_case_study/NTL_LTER_TL_data.rds"))
analysis_data<-full_data%>%
  select(year4, mean_sec,mean_chl, Large,mean_totpuf,period)%>%
  mutate(mean_sec_scale=scale(mean_sec),mean_chl_scale=scale(mean_chl), 
         Large_scale=scale(Large),mean_totpuf_scale=scale(mean_totpuf))
```

First we start with looking at three time periods using linear regression models:

1.  The historical regime with low water clarity

2.  A clear water regime where the introduction of Lake Trout into the system from stocking in 2006.

3.  A novel regime following the introduction of invasive, predatory water flea (*Bythotrephes*) in 2014 which lead to a reversion of water clarity to a less clear state.

To examine this we start by looking at a few key food web conditions using intercept only models through time:

1.  Water clarity

2.  Phosphorus - which impacts water clarity and is a common bottom-up process that could impact water clarity and we examine as an alternative hypothesis to the top down processes of Lake Trout and invasive speceis.

3.  Abundance of large zooplankton *Daphnia* and *Calanoids*

4.  Chlorophyll

```{r}
#| echo: false
#| warning: false
analysis_long<-analysis_data%>%
pivot_longer(!c(year4,period), names_to = 'Dataset', values_to='values')
dataset_names <- list(
  'mean_sec_scale'="Water Clarity",
  'mean_totpuf_scale'="Total Phosphorus",
  'mean_chl_scale'="Chlorophyll",
  'Large_scale'="Large Zooplankton"
)
facet_labeller <- function(variable,value){
  return(dataset_names[value])
}
ts <- ggplot(data=analysis_long%>%
         filter(Dataset=="mean_sec_scale"|Dataset=="mean_totpuf_scale"|
                 Dataset=="mean_chl_scale"| Dataset=="Large_scale"), aes(y=values, x=year4, group=Dataset, col=Dataset)) +
  facet_wrap(~Dataset,nrow=2,labeller=facet_labeller) +
  geom_hline(yintercept=0)+
  geom_point()+
  geom_line()+
  scale_colour_discrete(labels=facet_labeller)+
  geom_vline(xintercept=2007, lty=2)+
  geom_vline(xintercept=2014, lty=2)+
  xlab("Year")+
  ylab("Standardized Values")+
  guides(shape = FALSE)+ theme_bw()
```

## LM

We approach this by fitting a linear model with the a priori time periods as a factor and compare AIC to a single intercept model for each variable.

```{r}
#| include: false
#| warning: false
WC_period<-lm(mean_sec_scale~as.factor(period), data=analysis_data)
WC_int<-lm(mean_sec_scale~1, data=analysis_data)

Large_period<-lm(Large_scale~as.factor(period), data=analysis_data)
Large_int<-lm(Large_scale~1, data=analysis_data)

chl_period<-lm(mean_chl_scale~as.factor(period), data=analysis_data)
chl_int<-lm(mean_chl_scale~1, data=analysis_data)

phos_period<-lm(mean_totpuf_scale~as.factor(period), data=analysis_data)
phos_int<-lm(mean_totpuf_scale~1, data=analysis_data)


AIC_table<-data.frame(Variable=c("Water Clarity", "Total Phosphorus", "Chlorophyll", "Large Zooplankton"), No.Period.AIC=round(c(AIC(WC_int),AIC(phos_int),AIC(chl_int),AIC(Large_int)),digits=2),
Period.AIC=round(c(AIC(WC_period),AIC(phos_period),AIC(chl_period),AIC(Large_period)),digits=2), Best.Model=c("Period", "No difference", "Period","Period"))


```

We find that water clarity, chlorophyll, and large zooplankton abundance are all better explained by a model that includes *a priori* defined time periods improves model fit (@supptab-AIC). This indictes that the means for these variables change through time. By examining the time series plot (@suppfig-TS) we can see that large zooplankton and water clarity appear more correlated after 2006, when Lake Trout were stocked in the system. This aligns with our hypothesis that the introduction of top down control in the system has made large zooplankton abundance more tightly coupled with water clarity.

Next we consider whether there are changing relationships between water clarity and these ecosystem dynamics by including a slope parameter and its interaction with time period. We only include an investigation into large zooplankton-water clarity relationship in the main text, but here we also explore chlorophyll-water clarity.

```{r}
#| echo: false
#| include: false
#| warning: false
#make a table 

zoop_slope_int<-lm(mean_sec~Large*as.factor(period), data=full_data)
chl_slope_int<- lm(mean_sec~mean_chl*as.factor(period), data=full_data)
phos_slope_int<- lm(mean_sec~scale(mean_totpuf)*as.factor(period), data=full_data)

zoop_slope<-lm(mean_sec~Large+as.factor(period), data=full_data)
chl_slope<- lm(mean_sec~mean_chl+as.factor(period), data=full_data)
phos_slope<- lm(mean_sec~scale(mean_totpuf)+as.factor(period), data=full_data)

Interaction<-data.frame(
  Covariates= c("Chlorophyll", "Total Phosphorus", "Large Zooplankton"),
  Period = round(c(AIC(chl_slope),AIC(phos_slope),AIC(zoop_slope)), digits=2),
  Interaction= round(c(AIC(chl_slope_int),AIC(phos_slope_int),AIC(zoop_slope_int)), digits=2)
)


```

Both Chlorophyll and Large Zooplankton best explain water clarity with a time-varying relationship model, rather than a time-varying abundance model. Next, we examine how these relationships change through time, with a focus on large zooplankton.

```{r}
#| echo: false
#| warning: false
#| include: FALSE
print("Chlorophyll")
CHLresults<-data.table(coef(summary(chl_slope_int)), keep.rownames = 'term')
zoopresults<-data.table(coef(summary(zoop_slope_int)), keep.rownames = 'term')%>% mutate(across(where(is.numeric), round, digits=2))

Fit_zoop<-ggplot(data=analysis_long%>%
         filter(Dataset=="mean_sec"|
                  Dataset=="Large_scale")%>%
  pivot_wider(names_from = Dataset, values_from = values), aes(group=period,col=period, y=mean_sec,x=Large_scale)) +
  stat_smooth(method = "lm")+
  scale_colour_discrete(labels=c("1980 - 2006", "2007 - 2014", "2014 - 2022"))+
  geom_point()+
  ylab("Water Clarity")+
  xlab("Large Zooplankton")+ theme_bw()

TS_zoop<- ggplot(data=analysis_long%>%
         filter(Dataset=="mean_sec_scale"|
                  Dataset=="Large_scale"), aes(y=values, x=year4, group=Dataset, col=Dataset)) +
  #facet_wrap(~area1,scales="free_y") +
  geom_point()+
  geom_line()+
  scale_colour_discrete(labels=c("Water Clarity", "Large Zooplankton"))+
  geom_vline(xintercept=2007, lty=2)+
  geom_vline(xintercept=2014, lty=2)+
  guides(shape = FALSE)+
  xlab("Year")+ theme_bw()



Fit_chl <-ggplot(data=analysis_long%>%
         filter(Dataset=="mean_sec"|
                  Dataset=="mean_chl_scale")%>%
  pivot_wider(names_from = Dataset, values_from = values), aes(group=period,col=period, y=mean_sec,x=mean_chl_scale)) +
  stat_smooth(method = "lm")+
  scale_colour_discrete(labels=c("1980 - 2006", "2007 - 2014", "2014 - 2022"))+
  geom_point()+
  ylab("Water Clarity")+
  xlab("Chlorophyll")

TS_chl<-ggplot(data=analysis_long%>%
         filter(Dataset=="mean_sec_scale"|
                  Dataset=="mean_chl_scale"), aes(y=values, x=year4, group=Dataset, col=Dataset)) +
  #facet_wrap(~area1,scales="free_y") +
  geom_point()+
  geom_line()+
  scale_colour_discrete(labels=c("Water Clarity", "Chlorophyll"))+
  geom_vline(xintercept=2007, lty=2)+
  geom_vline(xintercept=2014, lty=2)+
  guides(shape = FALSE)+
  xlab("Year")




```

We can see from these results that there was a weak relationship from 1980 - 2006 between zooplankton abundance and water clarity, that switched to a strong, positive relationship in 2007 - 2014 as large zooplankton were released from top down pressure, and a slightly stronger relationship after 2014 with the introduction of *Bythotrephes* (@suppfig-fit & @supptab-coef).

## GAM

If we take the Zooplankton-water quality relationship and fit a temporally structured gam and compare it to the linear model, we find similar results. Both predictions also acccurately identify 2006 as a breakpoint and a second break point in 2016, although the GAM indicates that the slope of this relationship is a continuously changing trend (@suppfig-slope) and the intercept more closely tracks abundance (@suppfig-int).

```{r}
#| echo: FALSE
#| include: FALSE

prediction=data.frame(prediction=predict(zoop_slope_int,interval='confidence'),year=unique(analysis_long$year4))
ggplot(data=prediction,aes(y=prediction.fit, x=year)) +
  #facet_wrap(~area1,scales="free_y") +
 # geom_point()+
  geom_point(data=analysis_long%>%
         filter(Dataset=="mean_sec"), aes(y=values, x=year4, group=Dataset, col=Dataset))+
  geom_line()+
  ggtitle('Linear Model')+
  geom_vline(xintercept=2007, lty=2)+
  geom_vline(xintercept=2014, lty=2)+
  guides(shape = FALSE)

y.ts <- ts(data=prediction, frequency=1)
# fit breakpoint model
bp.y <- breakpoints(y.ts ~ 1)
summary(bp.y) 
prediction[26,]
prediction[36,]
gam1<-gam(mean_sec~s(year4, by=Large,k=10)+s(year4,k=10), data=full_data)
#plot(gam1)
#gam1<-gam(mean_sec~s(year4, by=Large,k=10), data=full_data)

gam2<-gam(mean_sec~s(year4,k=10), data=full_data)
gam3<-gam(mean_sec~s(Large,k=10), data=full_data)


prediction2=data.frame(prediction=predict(gam1, se.fit=TRUE),year=unique(analysis_long$year4))
gamfit<-ggplot(data=prediction2,aes(y=prediction.fit, x=year)) +
  #facet_wrap(~area1,scales="free_y") +
  #geom_point()+
  geom_line()+
    geom_point(data=analysis_long%>%
         filter(Dataset=="mean_sec"), aes(y=values, x=year4, group=Dataset, col=Dataset))+
  ggtitle('GAM')+
ylab("Water Clarity")+
xlab("Year")+
  geom_vline(xintercept=2007, lty=2)+
  geom_vline(xintercept=2014, lty=2)+
  guides(shape = FALSE)+ theme_bw()

y.ts <- ts(data=prediction2, frequency=1)
# fit breakpoint model
bp.y <- breakpoints(y.ts ~ 1)
summary(bp.y) 
prediction2[26,]
prediction2[36,]


```

```{r}
#| echo: FALSE
#| include: FALSE

results <- data.frame()
important_variables<-data.frame()
sf_fun <- function(first_year, window){
for(i in 1:length(window)){
 for(j in 1:length(first_year)){
 the_data <- analysis_long%>%
         filter(Dataset=="mean_sec"|
                  Dataset=="mean_chl_scale")%>%
  pivot_wider(names_from = Dataset, values_from = values)%>% 
   #filter(year4 <= first_year[j]+window[i] & year4 >= first_year[j])
   filter(year4 >= first_year[j]-window[i] & year4 <= first_year[j])
 
  the_lm <-  lm(mean_sec~mean_chl_scale, data=the_data)
  

 # slope_tibble[["last_year"]] <- last_year
 # slope_tibble[["first_year"]] <- first_year
  important_variables_temp <- cbind(Intercept=summary(the_lm)$coefficients[1,1],
                              Slope=summary(the_lm)$coefficients[2,1], 
                              last_year=first_year[j], 
                              first_year=first_year[j]-window[i],
                              window=window[i])
  
important_variables <-rbind(important_variables_temp, important_variables)
 #rbind(slope_tibble, important_variables)  
 } 
results <- rbind(important_variables, results)
}
return(results)
}
window<-c(3,5,7,9,11,13,15)
results_window<-sf_fun(2023:1992,window)
p <- ggplot(results_window, aes(x=last_year, y=as.factor(window), fill= Slope)) + 
  geom_tile()+
  xlab("Last Year")+
  ylab("Window")+
  scale_fill_gradient2(low = col[2],
                       mid = "#FFFFCC",
                       high = col[3], midpoint = 0)
p 

p <- ggplot(results_window, aes(x=last_year, y=as.factor(window), fill= Intercept)) + 
  geom_tile()+
  xlab("Last Year")+
  ylab("Window")+
  scale_fill_gradient2(low = "#075AFF",
                       mid = "#FFFFCC",
                       high = "#FF0000", midpoint = 6)
#p
```

```{r}
#| echo: FALSE
#| output: FALSE
#| include: FALSE


results <- data.frame()
important_variables<-data.frame()
sf_fun_gam <- function(first_year, window){
for(i in 1:length(window)){
 for(j in 1:length(first_year)){
 the_data <- analysis_long%>%
         filter(Dataset=="mean_sec"|
                  Dataset=="mean_chl_scale")%>%
  pivot_wider(names_from = Dataset, values_from = values)%>% 
   #filter(year4 <= first_year[j]+window[i] & year4 >= first_year[j])
   filter(year4 >= first_year[j]-window[i] & year4 <= first_year[j])
 
  the_gam <-  gam( mean_sec~s(year4, by=mean_chl_scale,k=6), data=the_data)
  
plot_cr <- plot(the_gam, seWithMean = TRUE, n = nrow(the_data))

df_cr <- data.frame(date = the_data$year4, 
                    est = plot_cr[[1]]$fit, 
                    se = plot_cr[[1]]$se, type="cr")
 # slope_tibble[["last_year"]] <- last_year
 # slope_tibble[["first_year"]] <- first_year
  important_variables_temp <- cbind(est=mean(df_cr$est), 
                              last_year=first_year[j], 
                              first_year=first_year[j]-window[i],
                              window=window[i])
  
important_variables <-rbind(important_variables_temp, important_variables)
 #rbind(slope_tibble, important_variables)  
 } 
results <- rbind(important_variables, results)
}
return(results)
}
window<-c(7,9,11,13,15)
results_window<-sf_fun_gam(2023:1992,window)


```

```{r}
#| echo: FALSE
#| include: FALSE

results <- data.frame()
important_variables<-data.frame()
sf_fun_zoop <- function(first_year, window){
for(i in 1:length(window)){
 for(j in 1:length(first_year)){
 the_data <- analysis_long%>%
         filter(Dataset=="mean_sec"|
                  Dataset=="Large_scale")%>%
  pivot_wider(names_from = Dataset, values_from = values)%>% 
   #filter(year4 <= first_year[j]+window[i] & year4 >= first_year[j])
   filter(year4 >= first_year[j]-window[i] & year4 <= first_year[j])
 
  the_lm <-  lm(mean_sec~Large_scale, data=the_data)
  
 
 # slope_tibble[["last_year"]] <- last_year
 # slope_tibble[["first_year"]] <- first_year
  important_variables_temp <- cbind(Intercept=summary(the_lm)$coefficients[1,1],
                              Slope=summary(the_lm)$coefficients[2,1], 
                              last_year=first_year[j], 
                              first_year=first_year[j]-window[i],
                              window=window[i])
  
important_variables <-rbind(important_variables_temp, important_variables)
 #rbind(slope_tibble, important_variables)  
 } 
results <- rbind(important_variables, results)
}
return(results)
}
window<-c(3,5,7,9,11,13,15)
results_window<-sf_fun_zoop(2023:1992,window)
panel_c <- ggplot(results_window, aes(x=last_year, y=as.factor(window), fill= Slope)) + 
  geom_tile()+
  xlab("")+
  ylab("")+
  scale_fill_gradient2(low = col[2],
                       mid = "#FFFFCC",
                       high = col[3], midpoint = 0)+
  geom_vline(xintercept = c(2006.5,2014.5), lty=2)+
      theme_classic()
panel_c 

panel_d<-rw_intercept <- 
  ggplot(results_window, aes(x=last_year, y=as.factor(window), fill= Intercept)) + 
  geom_tile()+
  xlab("")+
  ylab("Window Length (Years)")+
      geom_vline(xintercept = c(2006.5,2014.5), lty=2)+

  scale_fill_gradient2(low = col[2],
                       mid = "#FFFFCC",
                       high = col[3], midpoint = 5.25)+
      theme_classic()
  
panel_d

```

```{r}
#| echo: FALSE
#| include: FALSE
summary(zoop_slope_int)
pred<-rbind(prediction2%>%mutate(Model="GAM",
                     prediction.lwr=prediction.fit-2*prediction.se.fit,
                     prediction.upr=prediction.fit+2*prediction.se.fit)%>%
              select(-prediction.se.fit),
prediction%>%mutate(Model="LM"))
#Large Zoop
summary(gam1)
col<-paletteer_d("nationalparkcolors::Everglades")
table_zoop_slope_int<-broom::tidy(zoop_slope_int)
df <- data_sim("eg1", seed = 2)
p_obj <- plot(gam1, residuals = TRUE)

p_slope <- p_obj[[1]] # just one smooth so select the first component
p_intercept <- p_obj[[2]] # just one smooth so select the first component

p_slope<-as.data.frame(p_slope[c("x", "se", "fit")])%>%
   rename(se_slope=se, fit_slope=fit) 
p_intercept<-as.data.frame(p_intercept[c("x", "se", "fit")])%>%
   rename(se_intercept=se, fit_intercept=fit) 
p<-p_intercept%>%left_join(p_slope)
sm_df <- p%>%
  mutate(slope = ifelse(x<=2007, table_zoop_slope_int$estimate[2],
                          ifelse(x>=2014, table_zoop_slope_int$estimate[2]+table_zoop_slope_int$estimate[6],
                              table_zoop_slope_int$estimate[2]+ table_zoop_slope_int$estimate[5])))%>%
  mutate(error = ifelse(x<=2007, table_zoop_slope_int$std.error[2],
                          ifelse(x>=2014, table_zoop_slope_int$std.error[6],
                               table_zoop_slope_int$std.error[5])))%>%
    mutate(intercept = ifelse(x<=2007, table_zoop_slope_int$estimate[1],
                          ifelse(x>=2014, table_zoop_slope_int$estimate[1]+table_zoop_slope_int$estimate[4],
                              table_zoop_slope_int$estimate[1]+table_zoop_slope_int$estimate[3])))%>%
   mutate(error_int = ifelse(x<=2007, table_zoop_slope_int$std.error[1],
                          ifelse(x>=2014, table_zoop_slope_int$std.error[4],
                               table_zoop_slope_int$std.error[3])))
data_df <- as.data.frame(p_obj[c("raw", "p.resid")])

## panel a
panel_a<-ggplot(sm_df, aes(x = x, y = fit_slope)) +
    geom_line(aes(y=slope), colour=col[2])+
  geom_ribbon(aes(ymin = slope - error, ymax = slope+ error, y = NULL),
              alpha = 0.3,fill=col[2])+
  #geom_rug(data = data_df, mapping = aes(x = raw, y = NULL),sides = "b") +
  #geom_point(data = data_df, mapping = aes(x = raw, y = p.resid)) +
  geom_ribbon(aes(ymin = fit_slope- se_slope, ymax = fit_slope + se_slope, y = NULL),
              alpha = 0.3, fill=col[3]) +
  geom_line(colour=col[3], lty=2) +
  labs(x = p_obj$xlab, y = p_obj$ylab)+
  geom_vline(xintercept=c(2007, 2014), lty=2, col='grey')+ 
  ylab("Slope")+
  xlab("")+
  theme_classic()+
  theme(axis.text = element_text(size = 11))


panel_b<-ggplot(sm_df, aes(x = x, y = fit_intercept+4.758)) +
    geom_line(aes(y=intercept), colour=col[2])+
  geom_ribbon(aes(ymin = intercept - error_int, ymax = intercept+ error_int, y = NULL),
              alpha = 0.3,fill=col[2])+
  #geom_rug(data = data_df, mapping = aes(x = raw, y = NULL),sides = "b") +
  #geom_point(data = data_df, mapping = aes(x = raw, y = p.resid)) +
  geom_ribbon(aes(ymin = fit_intercept- se_intercept+4.758, ymax = fit_intercept + se_intercept+4.758, y = NULL),
              alpha = 0.3, fill=col[3]) +
  geom_line(colour=col[3], lty=2) +
  labs(x = p_obj$xlab, y = p_obj$ylab)+
  geom_vline(xintercept=c(2007, 2014), lty=2, col='grey')+ 
  ylab("Intercept")+
  xlab("")+
  theme_classic()+
  theme(axis.text = element_text(size = 11))
panel_b
#panel B

panel_f<-ggplot(data=pred,aes(y=prediction.fit, x=year,group=Model, col=Model)) +
  geom_line(lwd=0.7, aes(col=Model,lty=Model))+
  geom_ribbon(aes(ymin = prediction.lwr, ymax = prediction.upr, y = NULL,fill=Model),
              alpha = 0.3, colour = NA)+
  scale_fill_manual(values=c(col[3],col[2]))+
  scale_colour_manual(values=c(col[3],col[2]))+
  geom_vline(xintercept=c(2006,2014), lty=2,col='grey' )+
  guides(shape = FALSE)+
    geom_point(data=analysis_long%>%
         filter(Dataset=="mean_sec"), aes(y=values, x=year4, group=Dataset, col=Dataset),colour=col[4])+
  scale_linetype_manual(values=c( "dashed","solid"))+
  theme_classic()+
  theme(axis.text = element_text(size = 11))+
  ylab("Predicted Water Clarity")+
  xlab("")

#top_row<-ggarrange(panel_f, panel_b, panel_a, labels=c("A.", "B.", "C."), nrow=1,ncol=3, widths=c(1.5,1,1))
#top_row<-annotate_figure(top_row, bottom = text_grob("Year", gp = gpar(cex = 1)))
#bottom_row<-ggarrange(panel_d,panel_c, labels=c("D.", "E."), nrow=1,ncol=2)
#bottom_row<-annotate_figure(bottom_row, bottom = textGrob("Last Year of Window", gp = gpar(cex = 1)))
#ggarrange(top_row, bottom_row, nrow=2)
#ggsave("Figure_1_lmgam_comparisonv2.png", height = 7, width = 11,bg="white")

#pdf(file = "Figure1.pdf",   # The directory you want to save the file in
#    width = 8, # The width of the plot in inches
#    height = 6) # The height of the plot in inches

#ggarrange(panel_a, panel_b, panel_c, panel_d, labels=c("A.", "B.", "C.", "D."))

#dev.off()
```

## Figures & Tables

::: {#suppfig-TS}
```{r, echo=FALSE}
ts
```

Standardized time series of ecological conditions observed in Trout Lake.
:::

::: {#suppfig-fit}
```{r, echo=FALSE, warning=FALSE, message=FALSE}
Fit_zoop
```

Relationship between large zooplankton abundance and water clarity for three time periods defined *a priori*.
:::

::: {#suppfig-fitgam}
```{r, echo=FALSE, warning=FALSE, message=FALSE}
gamfit
```

Predicted values of water clarity (black line) compared to observed values (red points) using a time-varying relationship with zooplankton abundance.
:::

::: {#suppfig-slope}
```{r, echo=FALSE, warning=FALSE, message=FALSE}
panel_a
```

Estimates of the slope of the relationship based on a time-varying LM (blue) and a time-varying GAM (red)
:::

::: {#suppfig-int}
```{r, echo=FALSE, warning=FALSE, message=FALSE}
panel_b
```

Estimates of the intercept of the relationship based on a time-varying LM (blue) and a time-varying GAM (red)
:::

::: {#supptab-AIC}
```{r, echo=FALSE}
#| warning: false
knitr::kable(head(AIC_table))
```

AIC values comparing linear models with *a priori* defined time periods (time-varying model) and no time period (time-invariant model)
:::

::: {#supptab-INT}
```{r, echo=FALSE}
knitr::kable(head(Interaction))
```

AIC values comparing linear models comparing time-varying abundance models versus time-varying relationship models
:::

::: {#supptab-coef}
```{r, echo=FALSE, warning=FALSE}
knitr::kable(head(zoopresults))
```

Model coefficients for the time-varying relationship model between large zooplankton and water clarity
:::
